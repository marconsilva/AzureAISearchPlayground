@page "/search"
@using AzureAISearchPlayground.Components.Services
@using Azure.Search.Documents.Models
@inject ISearchService SearchService
@rendermode InteractiveServer

<PageTitle>Regular Search Page</PageTitle>

<div class="container mt-4">
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Enter search term..." @bind="searchText" @bind:event="oninput" @bind:after="PerformSearch" />
                <button class="btn btn-primary" @onclick="PerformSearch">Search</button>
            </div>
        </div>
    </div>
    
    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (searchResults != null && searchResults.Any())
    {
        <div class="row">
            @foreach (var result in searchResults)
            {
                <div class="col-6 col-sm-4 col-md-3 col-lg-2 mb-4">
                    <div class="card h-100">
                        @if (!string.IsNullOrEmpty(result.Document.ImageUri))
                        {
                            <img src="@result.Document.ImageUri" class="card-img-top" alt="@result.Document.Title" loading="lazy" />
                        }
                        else
                        {
                            <div class="placeholder-image d-flex align-items-center justify-content-center bg-light text-center p-2" style="height: 200px;">
                                <span>No Image</span>
                            </div>
                        }
                        <div class="card-body">
                            <h5 class="card-title text-truncate" title="@result.Document.Title">@result.Document.Title</h5>
                            @if (result.Document.Year.HasValue)
                            {
                                <p class="card-text small">@result.Document.Year</p>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else if (!string.IsNullOrEmpty(searchText) && searchPerformed)
    {
        <div class="alert alert-info">No results found for "@searchText"</div>
    }
</div>

<style>
    .card {
        transition: transform 0.2s ease;
        border-radius: 8px;
        overflow: hidden;
    }

    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }

    .card-img-top {
        aspect-ratio: 2/3;
        object-fit: cover;
    }

    .placeholder-image {
        aspect-ratio: 2/3;
    }
</style>

@code {
    public string? searchText = "";
    public List<SearchResult<MeoSearchResult>>? searchResults;
    public bool isLoading = false;
    public bool searchPerformed = false;

    private async Task PerformSearch()
    {
        if (string.IsNullOrWhiteSpace(searchText))
            return;
            
        isLoading = true;
        searchPerformed = true;
        
        try
        {
            searchResults = (await SearchService.MeoSearchAsync(searchText))?.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Search error: {ex.Message}");
            searchResults = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await PerformSearch();
    }
}